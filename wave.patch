Index: src/org/waveprotocol/box/server/robots/operations/ParticipantServices.java
===================================================================
--- src/org/waveprotocol/box/server/robots/operations/ParticipantServices.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/operations/ParticipantServices.java	(working copy)
@@ -37,12 +37,12 @@
 
 /**
  * {@link OperationService} for operations that add or remove a participant.
- * 
+ *
  * <p>
  * These operations are:
  * <li>{@link OperationType#WAVELET_ADD_PARTICIPANT_NEWSYNTAX}</li>
  * <li>{@link OperationType#WAVELET_REMOVE_PARTICIPANT_NEWSYNTAX}</li>.
- * 
+ *
  * @author anthony dot watkins at sesi dot com (Anthony Watkins)
  */
 public class ParticipantServices implements OperationService {
@@ -54,7 +54,7 @@
 
   /**
    * Adds or Removes a Participant on a Wavelet.
-   * 
+   *
    * @param operation the operation to execute.
    * @param context the context of the operation.
    * @param participant the participant performing this operation.
@@ -67,7 +67,7 @@
     // Get the conversation wavelet. If participant performing operation is not
     // a member of wavelet, InvalidRequestException is thrown by this method.
     ObservableConversation conversation =
-        context.openConversation(operation, participant).getRoot();
+        context.openRootConversation(operation, participant);
 
     // Get participant operation is being performed on.
     String paramParticipant =
@@ -77,7 +77,7 @@
     try {
       targetParticipant = ParticipantId.of(paramParticipant);
     } catch (InvalidParticipantAddress e) {
-      String message = "Target ParticipantId " + paramParticipant + " is not " + "valid"; 
+      String message = "Target ParticipantId " + paramParticipant + " is not " + "valid";
       LOG.info(message);
       throw new InvalidRequestException(message);
     }
@@ -97,7 +97,7 @@
       case WAVELET_ADD_PARTICIPANT_NEWSYNTAX:
         // Make sure targetParticipant is not already member.
         if (conversation.getParticipantIds().contains(targetParticipant)) {
-          String message = targetParticipant.getAddress() + " is already a " + "member of wavelet"; 
+          String message = targetParticipant.getAddress() + " is already a " + "member of wavelet";
           LOG.info(message);
           throw new InvalidRequestException(message, operation);
         }
@@ -113,7 +113,7 @@
         // Make sure targetParticipant is already member.
         if (!conversation.getParticipantIds().contains(targetParticipant)) {
           // Not a member, throw invalid request.
-          String message = targetParticipant.getAddress() + " is not a " + "member of wavelet"; 
+          String message = targetParticipant.getAddress() + " is not a " + "member of wavelet";
           LOG.info(message);
           throw new InvalidRequestException(message, operation);
         }
Index: src/org/waveprotocol/box/server/robots/operations/WaveletSetTitleService.java
===================================================================
--- src/org/waveprotocol/box/server/robots/operations/WaveletSetTitleService.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/operations/WaveletSetTitleService.java	(working copy)
@@ -39,11 +39,11 @@
   public void execute(
       OperationRequest operation, OperationContext context, ParticipantId participant)
       throws InvalidRequestException {
-    
+
     String title =
         OperationUtil.getRequiredParameter(operation, ParamsProperty.WAVELET_TITLE);
     ObservableConversation conversation =
-        context.openConversation(operation, participant).getRoot();
+        context.openRootConversation(operation, participant);
     String blipId = conversation.getRootThread().getFirstBlip().getId();
     Document doc = context.getBlip(conversation, blipId).getContent();
     TitleHelper.setExplicitTitle(doc, title);
Index: src/org/waveprotocol/box/server/robots/operations/DocumentModifyService.java
===================================================================
--- src/org/waveprotocol/box/server/robots/operations/DocumentModifyService.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/operations/DocumentModifyService.java	(working copy)
@@ -72,7 +72,7 @@
 
     OpBasedWavelet wavelet = context.openWavelet(operation, participant);
     ObservableConversation conversation =
-        context.openConversation(operation, participant).getRoot();
+        context.openRootConversation(operation, participant);
     Document doc = context.getBlip(conversation, blipId).getContent();
 
     ApiView view = new ApiView(doc, wavelet);
Index: src/org/waveprotocol/box/server/robots/operations/FolderActionService.java
===================================================================
--- src/org/waveprotocol/box/server/robots/operations/FolderActionService.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/operations/FolderActionService.java	(working copy)
@@ -35,7 +35,7 @@
 
 /**
  * Implements the "robot.folderAction" operations.
- * 
+ *
  * @author yurize@apache.org (Yuri Zelikov)
  */
 public class FolderActionService implements OperationService {
@@ -72,7 +72,7 @@
         supplement.markAsRead();
       } else {
         ObservableConversation conversation =
-            context.openConversation(operation, participant).getRoot();
+            context.openRootConversation(operation, participant);
         ConversationBlip blip = conversation.getBlip(blipId);
         supplement.markAsRead(blip);
       }
Index: src/org/waveprotocol/box/server/robots/operations/FetchWaveService.java
===================================================================
--- src/org/waveprotocol/box/server/robots/operations/FetchWaveService.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/operations/FetchWaveService.java	(working copy)
@@ -51,7 +51,7 @@
       throws InvalidRequestException {
     OpBasedWavelet wavelet = context.openWavelet(operation, participant);
     ObservableConversation conversation =
-        context.openConversation(operation, participant).getRoot();
+        context.openRootConversation(operation, participant);
 
     EventMessageBundle messages =
         mapWaveletToMessageBundle(context.getConverter(), participant, wavelet, conversation);
Index: src/org/waveprotocol/box/server/robots/OperationContext.java
===================================================================
--- src/org/waveprotocol/box/server/robots/OperationContext.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/OperationContext.java	(working copy)
@@ -26,6 +26,7 @@
 import org.waveprotocol.box.server.robots.util.ConversationUtil;
 import org.waveprotocol.wave.model.conversation.Conversation;
 import org.waveprotocol.wave.model.conversation.ConversationBlip;
+import org.waveprotocol.wave.model.conversation.ObservableConversation;
 import org.waveprotocol.wave.model.conversation.ObservableConversationView;
 import org.waveprotocol.wave.model.id.WaveId;
 import org.waveprotocol.wave.model.id.WaveletId;
@@ -98,7 +99,7 @@
    * wavelet for specified wavelet id doesn't exist - the method returns
    * null. However, for user data wavelets the method will create a new empty one
    * and return it.
-   * 
+   *
    * @param waveId the wave id of the wavelet to open.
    * @param waveletId the wavelet id of the wavelet to open.
    * @param participant the id of the participant that wants to open the
@@ -113,7 +114,7 @@
    * wavelet for specified wavelet id doesn't exist - the method returns
    * null. However, for user data wavelets the method will create a new empty one
    * and return it.
-   * 
+   *
    * @param operation the operation specifying which wavelet to open.
    * @param participant the id of the participant that wants to open the
    *        wavelet.
@@ -150,6 +151,10 @@
   ObservableConversationView openConversation(OperationRequest operation, ParticipantId participant)
       throws InvalidRequestException;
 
+  ObservableConversation openRootConversation(OperationRequest operation, ParticipantId participant)
+      throws InvalidRequestException;
+
+
   /**
    * Stores a reference from a temporary blip id to a real blip id. If the given
    * id is not a temporary id it will be ignored.
Index: src/org/waveprotocol/box/server/robots/OperationContextImpl.java
===================================================================
--- src/org/waveprotocol/box/server/robots/OperationContextImpl.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/OperationContextImpl.java	(working copy)
@@ -41,6 +41,7 @@
 import org.waveprotocol.box.server.waveserver.WaveletProvider;
 import org.waveprotocol.wave.model.conversation.Conversation;
 import org.waveprotocol.wave.model.conversation.ConversationBlip;
+import org.waveprotocol.wave.model.conversation.ObservableConversation;
 import org.waveprotocol.wave.model.conversation.ObservableConversationView;
 import org.waveprotocol.wave.model.id.InvalidIdException;
 import org.waveprotocol.wave.model.id.WaveId;
@@ -226,7 +227,7 @@
         } else {
           throw new InvalidRequestException("Wavelet " + waveletName + " couldn't be retrieved");
         }
-        
+
       } else {
         ObservableWaveletData obsWavelet = FACTORY.create(snapshot.snapshot);
         wavelet = new RobotWaveletData(obsWavelet, snapshot.committedVersion);
@@ -284,6 +285,12 @@
     }
   }
 
+  @Override
+  public ObservableConversation openRootConversation(
+      OperationRequest operation, ParticipantId participant) throws InvalidRequestException {
+    return openConversation(operation, participant).getRoot();
+  }
+
   // OperationResults implementation begins here
 
   @Override
Index: src/org/waveprotocol/box/server/robots/passive/EventGenerator.java
===================================================================
--- src/org/waveprotocol/box/server/robots/passive/EventGenerator.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/passive/EventGenerator.java	(working copy)
@@ -19,6 +19,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.wave.api.Context;
@@ -44,6 +45,7 @@
 import org.waveprotocol.wave.model.conversation.ConversationListenerImpl;
 import org.waveprotocol.wave.model.conversation.ObservableConversation;
 import org.waveprotocol.wave.model.conversation.ObservableConversationBlip;
+import org.waveprotocol.wave.model.conversation.ObservableConversationView;
 import org.waveprotocol.wave.model.conversation.WaveletBasedConversation;
 import org.waveprotocol.wave.model.document.DocHandler;
 import org.waveprotocol.wave.model.document.ObservableDocument;
@@ -529,7 +531,15 @@
       return null;
     }
 
-    ObservableConversation conversation = conversationUtil.buildConversation(wavelet).getRoot();
+    ObservableConversationView convView = conversationUtil.buildConversation(wavelet);
+    ObservableConversation conversation = convView.getRoot();
+    if (conversation == null) {
+      // Walkaround has no root conversation, get the first one.
+      conversation = Iterables.getFirst(convView.getConversations(), null);
+      if (conversation == null) {
+        return null;
+      }
+    }
     if (conversation.getRootThread().getFirstBlip() == null) {
       // No root blip is present, this will cause Robot API code
       // to fail when resolving the context of events. This might be fixed later
Index: src/org/waveprotocol/box/server/robots/passive/OperationServiceRegistryImpl.java
===================================================================
--- src/org/waveprotocol/box/server/robots/passive/OperationServiceRegistryImpl.java	(revision 1213039)
+++ src/org/waveprotocol/box/server/robots/passive/OperationServiceRegistryImpl.java	(working copy)
@@ -42,7 +42,7 @@
   // the default client libraries.
   @SuppressWarnings("deprecation")
   @Inject
-  OperationServiceRegistryImpl(NotifyOperationService notifyOpService) {
+  public OperationServiceRegistryImpl(NotifyOperationService notifyOpService) {
     super();
 
     // Register all the OperationProviders
Index: src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/EditToolbar.java
===================================================================
--- src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/EditToolbar.java	(revision 1354765)
+++ src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/EditToolbar.java	(working copy)
@@ -137,7 +137,7 @@
   }
 
   /** Constructs the initial set of actions in the toolbar. */
-  public void init() {
+  public void init(boolean enableAttachmentButton) {
     ToolbarView group = toolbarUi.addGroup();
     createBoldButton(group);
     createItalicButton(group);
@@ -172,8 +172,10 @@
     group = toolbarUi.addGroup();
     createInsertGadgetButton(group, user);
 
-    group = toolbarUi.addGroup();
-    createInsertAttachmentButton(group, user);
+    if (enableAttachmentButton) {
+      group = toolbarUi.addGroup();
+      createInsertAttachmentButton(group, user);
+    }
   }
 
   private void createBoldButton(ToolbarView toolbar) {
Index: src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/ToolbarSwitcher.java
===================================================================
--- src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/ToolbarSwitcher.java	(revision 1354765)
+++ src/org/waveprotocol/wave/client/wavepanel/impl/toolbar/ToolbarSwitcher.java	(working copy)
@@ -47,15 +47,15 @@
    * Creates a new {@link ToolbarSwitcher} and initialises it.
    */
   public static ToolbarSwitcher install(WavePanel panel, EditSession editSession,
-      ViewToolbar viewToolbar, EditToolbar editToolbar) {
+      ViewToolbar viewToolbar, EditToolbar editToolbar, boolean enableAttachmentButton) {
     ToolbarSwitcher switcher = new ToolbarSwitcher(panel, editSession, viewToolbar, editToolbar);
-    switcher.init();
+    switcher.init(enableAttachmentButton);
     return switcher;
   }
 
-  private void init() {
+  private void init(boolean enableAttachmentButton) {
     viewToolbar.init();
-    editToolbar.init();
+    editToolbar.init(enableAttachmentButton);
     editSession.addListener(this);
     if (editSession.isEditing()) {
       startEditSession(editSession.getEditor());
Index: src/org/waveprotocol/wave/client/StageThree.java
===================================================================
--- src/org/waveprotocol/wave/client/StageThree.java	(revision 1354765)
+++ src/org/waveprotocol/wave/client/StageThree.java	(working copy)
@@ -170,6 +170,10 @@
           stageTwo.getReader());
     }
 
+    protected boolean getAttachmentButtonEnabled() {
+      return true;
+    }
+
     protected String getLocalDomain() {
       return null;
     }
@@ -197,7 +201,7 @@
       EditSession edit = getEditSession();
       MenuController.install(actions, panel);
       ToolbarSwitcher.install(stageTwo.getStageOne().getWavePanel(), getEditSession(),
-          getViewToolbar(), getEditToolbar());
+          getViewToolbar(), getEditToolbar(), getAttachmentButtonEnabled());
       WaveTitleHandler.install(edit, models);
       ReplyIndicatorController.install(actions, edit, panel);
       EditController.install(focus, actions, panel);
